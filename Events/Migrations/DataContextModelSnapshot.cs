// <auto-generated />
using System;
using System.Collections.Generic;
using Events.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Events.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("TicketNumbers", "shared")
                .StartsAt(1000L);

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags", (string)null);
                });

            modelBuilder.Entity("Events.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("WorkspacePublicKey")
                        .HasColumnType("text");

                    b.Property<string>("WorkspaceSecretKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("62d27f63-4355-4e11-ae12-a449a8df4272"),
                            CreationDate = new DateTime(2025, 10, 30, 2, 4, 31, 221, DateTimeKind.Utc).AddTicks(7219),
                            Deleted = false,
                            FullName = "Super Admin",
                            Password = "$2a$10$nIpRLxBC5Z7mV2rRYavAgeEQQHWft2cjE/RTjPCBxA/9bS0j.AuP6",
                            PhoneNumber = "07709509877",
                            Role = 0,
                            WorkspacePublicKey = "4a337713-31a9-454e-8d18-51bc555eb390",
                            WorkspaceSecretKey = "6e44c7c4-de85-495e-b7de-08f6fdc2b229"
                        });
                });

            modelBuilder.Entity("Events.Entities.BaseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Events.Entities.BaseChart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChartKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DraftVersionThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublishedVersionThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RelatedChartId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkspaceKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("Events.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillId")
                        .HasColumnType("text");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("BookId1");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Events.Entities.Book.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Events.Entities.Book.BookObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookObjects");
                });

            modelBuilder.Entity("Events.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<List<string>>("Attachments")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("ChartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndEvent")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("EndReservationDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EventKey")
                        .HasColumnType("text");

                    b.Property<bool?>("IsFeature")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPublish")
                        .HasColumnType("boolean");

                    b.Property<double?>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lng")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SeatAvailable")
                        .HasColumnType("integer");

                    b.Property<int?>("SeatBooked")
                        .HasColumnType("integer");

                    b.Property<string>("SlugHash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartEvent")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("StartReservationDate")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("UsedTickets")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChartId")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Events.Entities.EventFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventFavorites");
                });

            modelBuilder.Entity("Events.Entities.EventPointOfSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("EventEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PointOfSaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventEntityId");

                    b.HasIndex("EventId");

                    b.HasIndex("PointOfSaleId");

                    b.ToTable("EventPointOfSale");
                });

            modelBuilder.Entity("Events.Entities.Notifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("NotifyFor")
                        .HasColumnType("text");

                    b.Property<Guid>("NotifyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Events.Entities.SupportMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupportMessages");
                });

            modelBuilder.Entity("Events.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Events.Entities.Ticket.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookObjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('shared.\"TicketNumbers\"')");

                    b.Property<string>("SeatCategory")
                        .HasColumnType("text");

                    b.Property<string>("TicketSeating")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookObjectId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Events.Entities.Ticket.TicketTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fields")
                        .HasColumnType("jsonb");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("TicketTemplates");
                });

            modelBuilder.Entity("Events.Entities.PointOfSale", b =>
                {
                    b.HasBaseType("Events.Entities.AppUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Lat")
                        .HasColumnType("text");

                    b.Property<string>("Lng")
                        .HasColumnType("text");

                    b.Property<List<string>>("PhoneNumbers")
                        .HasColumnType("text[]");

                    b.ToTable("PointOfSales", (string)null);
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("Events.Entities.EventEntity", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Entities.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Events.Entities.BaseCategory", b =>
                {
                    b.HasOne("Events.Entities.BaseChart", "Chart")
                        .WithMany("Categories")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("Events.Entities.BaseChart", b =>
                {
                    b.HasOne("Events.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Events.Entities.Bill", b =>
                {
                    b.HasOne("Events.Entities.Book.Book", null)
                        .WithOne("Bill")
                        .HasForeignKey("Events.Entities.Bill", "BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Events.Entities.Book.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId1");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Events.Entities.Book.Book", b =>
                {
                    b.HasOne("Events.Entities.EventEntity", "Event")
                        .WithMany("Books")
                        .HasForeignKey("EventId");

                    b.HasOne("Events.Entities.AppUser", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Events.Entities.Book.BookHoldInfo", "BookHoldInfo", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ExpiredMinutes")
                                .HasColumnType("integer");

                            b1.Property<string>("HoldToken")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BookId");

                            b1.ToTable("Books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.Navigation("BookHoldInfo");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Events.Entities.Book.BookObject", b =>
                {
                    b.HasOne("Events.Entities.Book.Book", "Book")
                        .WithMany("Objects")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Entities.BaseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.OwnsOne("Events.Entities.Book.BookHoldInfo", "BookHoldInfo", b1 =>
                        {
                            b1.Property<Guid>("BookObjectId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ExpiredMinutes")
                                .HasColumnType("integer");

                            b1.Property<string>("HoldToken")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BookObjectId");

                            b1.ToTable("BookObjects");

                            b1.WithOwner()
                                .HasForeignKey("BookObjectId");
                        });

                    b.Navigation("Book");

                    b.Navigation("BookHoldInfo");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Events.Entities.EventEntity", b =>
                {
                    b.HasOne("Events.Entities.BaseChart", "Chart")
                        .WithOne("Event")
                        .HasForeignKey("Events.Entities.EventEntity", "ChartId");

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("Events.Entities.EventFavorite", b =>
                {
                    b.HasOne("Events.Entities.EventEntity", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Events.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Events.Entities.EventPointOfSale", b =>
                {
                    b.HasOne("Events.Entities.EventEntity", null)
                        .WithMany("PointOfSales")
                        .HasForeignKey("EventEntityId");

                    b.HasOne("Events.Entities.EventEntity", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Events.Entities.PointOfSale", "PointOfSale")
                        .WithMany()
                        .HasForeignKey("PointOfSaleId");

                    b.Navigation("Event");

                    b.Navigation("PointOfSale");
                });

            modelBuilder.Entity("Events.Entities.Ticket.Ticket", b =>
                {
                    b.HasOne("Events.Entities.Book.BookObject", "BookObject")
                        .WithOne("Ticket")
                        .HasForeignKey("Events.Entities.Ticket.Ticket", "BookObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BookObject");
                });

            modelBuilder.Entity("Events.Entities.Ticket.TicketTemplate", b =>
                {
                    b.HasOne("Events.Entities.EventEntity", "Event")
                        .WithMany("TicketTemplates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Events.Entities.Ticket.TicketTemplateStage", "StageDetails", b1 =>
                        {
                            b1.Property<Guid>("TicketTemplateId")
                                .HasColumnType("uuid");

                            b1.Property<string>("height")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("width")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TicketTemplateId");

                            b1.ToTable("TicketTemplates");

                            b1.WithOwner()
                                .HasForeignKey("TicketTemplateId");
                        });

                    b.Navigation("Event");

                    b.Navigation("StageDetails");
                });

            modelBuilder.Entity("Events.Entities.PointOfSale", b =>
                {
                    b.HasOne("Events.Entities.AppUser", null)
                        .WithOne()
                        .HasForeignKey("Events.Entities.PointOfSale", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Entities.AppUser", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Events.Entities.BaseChart", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Event")
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Entities.Book.Book", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("Objects");
                });

            modelBuilder.Entity("Events.Entities.Book.BookObject", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Events.Entities.EventEntity", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("EventTags");

                    b.Navigation("PointOfSales");

                    b.Navigation("TicketTemplates");
                });

            modelBuilder.Entity("Events.Entities.Tag", b =>
                {
                    b.Navigation("EventTags");
                });
#pragma warning restore 612, 618
        }
    }
}
